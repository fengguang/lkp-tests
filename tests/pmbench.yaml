short_description: >
 pmbench - paging and virtual memory benchmark

description: >
 pmbench is a micro-benchmark that profiles system paging performance by
 measuring latencies of  each  memory  access  throughout  the  run  and
 reporting the statistics of measured latencies.

homepage: 

parameters:
 runtime: 
 mapsize: Specify virtual address map size in Mebibyte (2^20 bytes)  unit. The default is 256.
 setsize: Specify  working  set  size  in  Mebibyte unit.  It should be no greater than mapsize. The default is 128.
 pattern: [linear, uniform, normal, pareto]  
 shape: Pattern-specific  numeric parameter that determines the shape of the distribution.  See Usage for details.   
 jobs: Number of concurrent worker threads to spawn for the  benchmark. Some releases may not support this option. The default is 1.
 timestamp: [rdtsc, rdtscp, perfc]
 cold: [y, n]
 access: [histo, touch]
 delay: Delay between accesses in clock cycles
 initialize: [y, n] Initialize memory map with garbage data
 offset: Specify static page access offset (default random)
 quiet: [y, n] Don't produce any output until finish
 ratio: Percentage read/write ratio (0 = write only, 100 = read only; default 50)
 threshold: The threshold time to trigger the ftrace log, unit is ns.

results:
 pmbench.latency.ns.average:
 pmbench.read.latency.ns.0-256%:
 pmbench.read.latency.ns.256-512%:
 pmbench.read.latency.ns.512-1K%:
 pmbench.read.latency.ns.1K-2K%:
 pmbench.read.latency.ns.2K-4K%:
 pmbench.read.latency.ns.4K-8K%:
 pmbench.read.latency.ns.8K-16K%:
 pmbench.read.latency.ns.16K-32K%:
 pmbench.read.latency.ns.32K-64K%:
 pmbench.read.latency.ns.64K-128K%:
 pmbench.read.latency.ns.128K-256K%:
 pmbench.read.latency.ns.256K-512K%:
 pmbench.read.latency.ns.512K-1M%:
 pmbench.read.latency.ns.1M-2M%:
 pmbench.read.latency.ns.2M-4M%:
 pmbench.read.latency.ns.4M-8M%:
 pmbench.read.latency.ns.8M-16M%:
 pmbench.read.latency.ns.16M-32M%:
 pmbench.read.latency.ns.32M-64M%:
 pmbench.read.latency.ns.64M-128M%:
 pmbench.read.latency.ns.128M-256M%:
 pmbench.read.latency.ns.256M-512M%:
 pmbench.read.latency.ns.512M-1G%:
 pmbench.read.latency.ns.1G-inf%:
 pmbench.write.latency.ns.0-256%:
 pmbench.write.latency.ns.256-512%:
 pmbench.write.latency.ns.512-1K%:
 pmbench.write.latency.ns.1K-2K%:
 pmbench.write.latency.ns.2K-4K%:
 pmbench.write.latency.ns.4K-8K%:
 pmbench.write.latency.ns.8K-16K%:
 pmbench.write.latency.ns.16K-32K%:
 pmbench.write.latency.ns.32K-64K%:
 pmbench.write.latency.ns.64K-128K%:
 pmbench.write.latency.ns.128K-256K%:
 pmbench.write.latency.ns.256K-512K%:
 pmbench.write.latency.ns.512K-1M%:
 pmbench.write.latency.ns.1M-2M%:
 pmbench.write.latency.ns.2M-4M%:
 pmbench.write.latency.ns.4M-8M%:
 pmbench.write.latency.ns.8M-16M%:
 pmbench.write.latency.ns.16M-32M%:
 pmbench.write.latency.ns.32M-64M%:
 pmbench.write.latency.ns.64M-128M%:
 pmbench.write.latency.ns.128M-256M%:
 pmbench.write.latency.ns.256M-512M%:
 pmbench.write.latency.ns.512M-1G%:
 pmbench.write.latency.ns.1G-inf%:
