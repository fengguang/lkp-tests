#!/usr/bin/env ruby

LKP_SRC = ENV['LKP_SRC'] || File.dirname(File.dirname(File.realpath($PROGRAM_NAME)))

require "#{LKP_SRC}/lib/statistics"
require "#{LKP_SRC}/lib/string_ext"

stats = []
testname = nil
mqueue_speed = {}
tests_stats = Hash.new { |h, k| h[k] = {} }

def futex_stat(line, futex, stats)
  case line
  when /^(futex.+): /
      futex['subtest'] = $1
  when /^\s+Arguments: (.+)/
      futex['argument'] = $1.tr(' ', '_')
  when /^Result\:\s+(PASS|FAIL)/
    stats << if futex['argument'] && !(futex['argument'].include? 'none')
               "futex.#{futex['subtest']}.#{futex['argument']}.#{$1.downcase}: 1"
             else
               "futex.#{futex['subtest']}.#{$1.downcase}: 1"
             end
    futex['argument'] = nil
  end
end

def memory_hotplug_stat(line, memory_hotplug, stats)
  case line
  when /^\.\/(.+\.sh).+selftests: memory-hotplug/
    memory_hotplug['subtest'] = $1
  when /^selftests: memory-hotplug \[FAIL\]/
    stats << "memory-hotplug.#{memory_hotplug['subtest']}.fail: 1"
    memory_hotplug['subtest'] = nil
  when %r{make: Leaving directory .*/(.*)'}
    stats << "memory-hotplug.#{memory_hotplug['subtest']}.pass: 1" if memory_hotplug['subtest']
  end
end

def mount_stat(line, mount, stats)
  case line
  when %r{if .* then ./(.*) ; else echo}
    mount['subtest'] = $1
  when /^WARN\: No \/proc\/self\/uid_map exist, test skipped/
    stats << "mount.#{mount['subtest']}.skip: 1"
    mount['subtest'] = nil
  when /(^(MS.+|Default.+) malfunctions$)|(^Mount flags unexpectedly changed after remount$)/
    stats << "mount.#{mount['subtest']}.fail: 1"
    mount['subtest'] = nil
  when %r{make: Leaving directory .*/(.*)'}
    stats << "mount.#{mount['subtest']}.pass: 1" if mount['subtest']
  end
end

def x86_stat(line, _x86, stats)
  case line
  when /^processor lacks MPX XSTATE\(s\), can not run MPX tests/
    stats << 'x86.mpx-mini-test_64.skip: 1'
  when /^selftests: (.*) .*(PASS|FAIL)/
    return if $1 == 'mpx-mini-test_64' && (stats.include? 'x86.mpx-mini-test_64.skip: 1')
    stats << "x86.#{$1}.#{$2.downcase}: 1"
  end
end

while (line = STDIN.gets)
  line = line.remediate_invalid_byte_sequence(replace: '_') unless line.valid_encoding?

  case line
  when %r{make: Entering directory .*/(.*)'}
    testname = Regexp.last_match[1]
  when %r{make: Leaving directory .*/(.*)'}
    if testname == 'memory-hotplug'
      memory_hotplug_stat(line, tests_stats['memory-hotplug'], stats)
    elsif testname == 'mount'
      mount_stat(line, tests_stats['mount'], stats)
    else
      # rli9 FIXME: consider the input has messed text like Entering doesn't match with Leaving
      testname = nil
    end
  when /^selftests: (.*) .*(PASS|FAIL)/
    if testname == 'memory-hotplug'
      memory_hotplug_stat(line, tests_stats['memory-hotplug'], stats)
    elsif testname == 'x86'
      x86_stat(line, tests_stats['x86'], stats)
    else
      stats << "#{testname}.#{Regexp.last_match[1].strip}.#{Regexp.last_match[2].downcase}: 1"
    end
  when /Test #([1-9].*):/
    mqueue_test = Regexp.last_match[1]
  when /(Send|Recv) msg:/
    io = Regexp.last_match[1]
  when %r{(\d+) nsec/msg}
    mqueue_speed[mqueue_test + '.' + io] = Regexp.last_match[1].to_i
  when /: recipe for target.+failed$/
    next unless testname
    # do not count make fail in nr_test, which is for sub test number
    stats << "#{testname}.make_fail: 1"
  when /^ignored_by_lkp (.*) test/
    stats << "#{$1}.ignored_by_lkp: 1"
  else
    if testname == 'futex'
      futex_stat(line, tests_stats['futex'], stats)
    elsif testname == 'memory-hotplug'
      memory_hotplug_stat(line, tests_stats['memory-hotplug'], stats)
    elsif testname == 'mount'
      mount_stat(line, tests_stats['mount'], stats)
    elsif testname == 'x86'
      x86_stat(line, tests_stats['x86'], stats)
    end
  end
end

unless mqueue_speed.empty?
  stats << "mqueue.nsec_per_msg: #{mqueue_speed.values.average.to_i}"
end

stats.uniq.each { |stat| puts stat }
nr_test = stats.count { |k, _v| k !~ /\.make_fail|\.ignored_by_lkp/ }
puts "total_test: #{nr_test}" if nr_test.nonzero?
